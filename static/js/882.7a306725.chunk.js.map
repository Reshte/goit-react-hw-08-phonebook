{"version":3,"file":"static/js/882.7a306725.chunk.js","mappings":"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","sources":["components/ContactList/ContactListItem/ContactListItem.jsx","redux/selectors.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/FilterForm/FilterForm.styled.jsx","components/FilterForm/FilterForm.jsx","pages/Contacts.js"],"sourcesContent":["// import { Item } from './ContactListItem.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from \"redux/operations\";\nimport { Button } from '@mui/material';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport { styled } from '@mui/material/styles';\n\nconst Item = styled(Paper)(({ theme }) => ({\n  backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n  ...theme.typography.body2,\n     padding: theme.spacing(2),\n     display: 'flex',\n     justifyContent: 'space-between',\n     alignItems: 'center',\n     textAlign: 'center',\n     color: theme.palette.text.secondary,\n     fontWeight:'600'\n}));\n\nexport const ContactListItem = ({ id, name, number }) => {\n     const dispatch = useDispatch()\n     const handleDelete = () => dispatch(deleteContact(id));\n     return (  \n            <Grid item xs={12}>\n               <Item>\n                    <p>{name} : {number}</p>\n                    <Button variant=\"contained\"  type='button' onClick={handleDelete} >Delete</Button>\n               </Item>\n         </Grid>\n\n     )  \n}\n\n","export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n","import { ContactListItem } from './ContactListItem/ContactListItem'\n// import { List } from './ContactList.styled'\nimport { useSelector } from \"react-redux\";\nimport { selectContacts } from '../../redux/selectors'\nimport { selectFilter } from '../../redux/selectors'\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\n\n\nconst getVisibleContacts = (contacts, filter) => {\n    if (filter.length > 0) { return contacts.filter(({ name }) => name.toLowerCase().includes(filter)) }\n    return contacts;\n    };\n\nexport const ContactList = () => {\n    const contacts = useSelector(selectContacts)\n    const filter = useSelector(selectFilter);    \n    const visibleContacts = getVisibleContacts(contacts, filter)\n  \n            return ( \n    <Box sx={{ flexGrow: 1 }}>\n         <Grid container spacing={2}>\n                   {visibleContacts.map(({ id, name, number }) => (\n                       <ContactListItem key={id} id={id} name={name} number={number}/>))}\n            </Grid>\n    </Box> )\n}\n","import styled from '@emotion/styled'\n\nexport const Form = styled.form`\ndisplay:flex;\nflex-direction: column;\nalign-items: flex-start;\ngap:10px;\nborder: 1px solid black;\nborder-radius: 5px;\npadding: 20px;   \n`\n\nexport const Label = styled.label`\ndisplay:flex;\nflex-direction: column;\ngap:5px;`\n\nexport const Input = styled.input`\noutline-color:#00bfff;`\n\nexport const Button = styled.button`\nfont-size: 15px;\ndisplay:block;\nheight: 15px;\nflex-basis:20%;\ncursor:pointer;\nborder-radius: 5px;\npadding: 3px 5px; \nborder: solid 1px #777777; \ntransition: all .3s linear;\n\n&:hover {\n  background-color: #00bfff;\n  color:white;\n}\n `","import { Form } from './ContactForm.styled'\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\nimport { TextField, Button } from '@mui/material';\n\n\nexport function ContactForm () {\n  const [name, setName] =useState('')\n  const [number, setNumber] = useState('')\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts)\n  \nconst handleSubmit = event => {\n  event.preventDefault();\n  const isNameInContacts = contacts.find(contact => contact.name.toLowerCase() ===  name.toLowerCase().trim() )\n  if (isNameInContacts) {\n    alert(`${name} is already in contacts`)\n  } else {\n    const contact = { name, number }\n    dispatch(addContact(contact))\n  }\n    reset();\n  };\n\n\nconst handelInputChange = (e) => {\n    switch (e.currentTarget.name) {\n      case 'name':\n        setName(e.currentTarget.value)\n        break;\n      \n       case 'phone':\n        setNumber(e.currentTarget.value)\n        break;\n    \n      default:\n        console.log(\"Бедося у тебя с руками\")\n    }}\n         \n   const reset = () => {\n     setName('')\n     setNumber('')\n    }\n    \n  return (<Form onSubmit={handleSubmit}>\n       <TextField id=\"outlined-basic\" type=\"text\"  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              value={name}\n              onChange={handelInputChange}\n              required  name=\"name\" \n              label=\"Name\" variant=\"outlined\" margin=\"normal\" />\n          {/* <Label htmlFor=\"\" > Name\n            <Input\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              value={name}\n              onChange={handelInputChange}\n              required />\n          </Label>       */}\n    \n    <TextField id=\"outlined-basic\" type=\"tel\"  pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              value={number}\n              onChange={handelInputChange}\n              required  name=\"phone\" \n              label=\"Phone number\" variant=\"outlined\" margin=\"normal\" />\n          {/* <Label htmlFor=\"\"> Phone number\n            <Input\n             type=\"tel\"\n              name=\"phone\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n              value={number}\n              onChange={handelInputChange}\n                />\n          </Label> */}\n    <Button variant=\"contained\" type=\"submit\" >Add contact</Button>\n          {/* <Button type=\"submit\">Add contact</Button>        */}\n          </Form>)\n\n}\n\n","import styled from '@emotion/styled'\n\nexport const Wrapper = styled.div`\n    display:flex;\n`\nexport const Label = styled.label`\n     display:flex;\n     flex-direction: column;\n     gap:10px;\n`\n\nexport const Input = styled.input`\n   \n`","import {  Wrapper } from './FilterForm.styled'\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/filterSlice'\nimport { TextField } from '@mui/material'\n\n\nexport const FilterForm = () => {\n    const dispatch = useDispatch()\n    \n    const onChange = (e) => {\n                dispatch(setFilter(e.currentTarget.value.toLowerCase().trim()))\n           }\n       return (\n           <Wrapper>\n               <TextField id=\"outlined-basic\" type=\"text\" label=\"Find contacts name\" variant=\"outlined\" onChange={onChange} margin=\"normal\" sx={{ ml: '20px'}} />\n\n            {/* <Label htmlFor=\"\">Find contacts name\n                <Input type=\"text\"  onChange={onChange} />\n            </Label> */}\n        </Wrapper>\n    )\n}\n\n\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { FilterForm } from 'components/FilterForm/FilterForm';\nimport { fetchContacts } from 'redux/operations';\nimport { selectIsLoading } from 'redux/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <title>Phonebook</title>\n      <ContactForm />\n      <title>Contacts</title>\n      <FilterForm />\n      {isLoading && <b>Request in progress...</b>}\n      <ContactList />\n    </>\n  );\n}\n"],"names":["Item","styled","Paper","theme","backgroundColor","palette","mode","typography","body2","padding","spacing","display","justifyContent","alignItems","textAlign","color","text","secondary","fontWeight","ContactListItem","id","name","number","dispatch","useDispatch","Grid","item","xs","Button","variant","type","onClick","deleteContact","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectFilter","filter","ContactList","visibleContacts","length","toLowerCase","includes","getVisibleContacts","useSelector","Box","sx","flexGrow","container","map","Form","ContactForm","useState","setName","setNumber","handelInputChange","e","currentTarget","value","console","log","reset","onSubmit","event","preventDefault","isNameInContacts","find","contact","trim","alert","addContact","TextField","pattern","title","onChange","required","label","margin","Wrapper","FilterForm","setFilter","ml","Contacts","useEffect","fetchContacts"],"sourceRoot":""}